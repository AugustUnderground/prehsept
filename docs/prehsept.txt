-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | PRECEPT, but in Haskell.
--   
--   Please see the README on GitHub at
--   <a>https://github.com/augustunderground/prehsept#readme</a>
@package prehsept
@version 0.6.6.6


-- | Hyper Parameters of OpNet
module Torch.Extensions

-- | GPU
gpu :: Device

-- | CPU
cpu :: Device

-- | The inverse of <tt>log10</tt>
pow10 :: Tensor -> Tensor

-- | Because snake_case sucks and this project uses Float instead of Double
nanToNum :: Float -> Float -> Float -> Tensor -> Tensor

-- | Default limits for <a>nanToNum</a>
nanToNum' :: Tensor -> Tensor

-- | Default limits for <a>nanToNum</a> (0.0)
nanToNum'' :: Tensor -> Tensor

-- | MSE with reduction
mseLoss' :: Reduction -> Tensor -> Tensor -> Tensor

-- | Mean over all dimensions
meanAll :: Tensor -> Tensor


-- | Helper and Utility Functions
module Lib

-- | Available PDKs
data PDK

-- | X-Fab XH035 350nm Process
XH035 :: PDK

-- | X-Fab XH018 180nm Process
XH018 :: PDK

-- | X-Fab XT018 180nm Process
XT018 :: PDK

-- | Fictional Cadence GPDK180 GPDK 180nm Process
GPDK180 :: PDK

-- | Fictional Cadence GPDK090 GPDK 90nm Process
GPDK090 :: PDK

-- | Fictional Cadence GPDK045 GPDK 45nm Process
GPDK045 :: PDK

-- | SkyWater SKY130 130nm Process
SKY130 :: PDK

-- | Fictional Predictive Technology Models PTM130 130nm Process
PTM130 :: PDK

-- | Device Types
data Device

-- | NMOS
NMOS :: Device

-- | PMOS
PMOS :: Device

-- | First of Triple
fst3 :: (a, b, c) -> a

-- | Uncurry triple
uncurry' :: (a -> b -> c -> d) -> (a, b, c) -> d

-- | Create single element list from given element
singleton :: a -> [a]

-- | Create a boolean mask from a subset of column names
boolMask :: [String] -> [String] -> [Bool]

-- | Create a boolean mask Tensor from a subset of column names
boolMask' :: [String] -> [String] -> Tensor

-- | Create Integer Index for a subset of column names
intIdx :: [String] -> [String] -> [Int]

-- | Create Integer Index Tensor for a subset of column names
intIdx' :: [String] -> [String] -> Tensor

-- | Round Float Tensor to n digits
round :: Int -> Tensor -> Tensor

-- | (Re-) Shuffle batches
shuffleBatches :: Int -> Tensor -> Tensor -> IO ([Tensor], [Tensor])

-- | Scale data to [0;1]
scale :: Tensor -> Tensor -> Tensor -> Tensor

-- | Un-Scale data from [0;1]
scale' :: Tensor -> Tensor -> Tensor -> Tensor

-- | Apply log10 to masked data
trafo :: Tensor -> Tensor -> Tensor

-- | Apply pow10 to masked data
trafo' :: Tensor -> Tensor -> Tensor

-- | calculate gm from gm<i>Id and Id, input is [gm</i>Id, Id, fug, Vds,
--   Vbs]
process :: Tensor -> Tensor

-- | Default Column Names for stored Tensors
columnHeader :: [String]

-- | Load a Pickled Tensor from file
loadTensor :: FilePath -> IO Tensor

-- | Pickle a Tensor and Save to file
saveTensor :: Tensor -> FilePath -> IO ()

-- | Current Timestamp as formatted string
currentTimeStamp :: String -> IO String

-- | Current Timestamp with default formatting: "%Y%m%d-%H%M%S"
currentTimeStamp' :: IO String

-- | Create a model archive directory for the given pdk and device type
createModelDir :: String -> String -> IO String

-- | Just for the notebooks, to create a directory above
createModelDir' :: String -> String -> IO String

-- | Command Line Arguments
data Args
Args :: !PDK -> !Device -> !FilePath -> !Int -> !Int -> !Int -> !Bool -> Args

-- | PDK
[pdk] :: Args -> !PDK

-- | NMOS | PMOS
[dev] :: Args -> !Device

-- | Path to Data
[dir] :: Args -> !FilePath

-- | Number of Epochs
[num] :: Args -> !Int

-- | Area of Operation
[reg] :: Args -> !Int

-- | Batch Size
[size] :: Args -> !Int

-- | Experimental
[exp] :: Args -> !Bool

-- | Progress Bar Style for Training
trainStyle :: Int -> Style s

-- | Progress Bar Style for Validation
validStyle :: Int -> Style s
instance GHC.Classes.Eq Lib.PDK
instance GHC.Classes.Eq Lib.Device
instance GHC.Show.Show Lib.Args
instance GHC.Show.Show Lib.Device
instance GHC.Read.Read Lib.Device
instance GHC.Show.Show Lib.PDK
instance GHC.Read.Read Lib.PDK


-- | Neural Network Definition and Training
module Net

-- | Neural Network Specification
data OpNetSpec
OpNetSpec :: !Int -> !Int -> OpNetSpec

-- | Number of input neurons
[numX] :: OpNetSpec -> !Int

-- | Number of output neurons
[numY] :: OpNetSpec -> !Int

-- | Network Architecture
data OpNet
OpNet :: !Linear -> !Linear -> !Linear -> !Linear -> !Linear -> !Linear -> !Linear -> OpNet
[fc0] :: OpNet -> !Linear
[fc1] :: OpNet -> !Linear
[fc2] :: OpNet -> !Linear
[fc3] :: OpNet -> !Linear
[fc4] :: OpNet -> !Linear
[fc5] :: OpNet -> !Linear
[fc6] :: OpNet -> !Linear

-- | Neural Network Forward Pass with scaled Data
forward :: OpNet -> Tensor -> Tensor

-- | Remove Gradient for tracing / scripting
noGrad :: Parameterized f => f -> IO f

-- | Save Model and Optimizer Checkpoint
saveCheckPoint :: FilePath -> OpNet -> Adam -> IO ()

-- | Load a Saved Model and Optimizer CheckPoint
loadCheckPoint :: FilePath -> OpNetSpec -> Int -> IO (OpNet, Adam)

-- | Trace and Return a Script Module
traceModel :: Device -> PDK -> Int -> [String] -> [String] -> (Tensor -> Tensor) -> IO ScriptModule

-- | Trace to Function
unTraceModel :: ScriptModule -> Tensor -> Tensor

-- | Save a Traced ScriptModule
saveInferenceModel :: FilePath -> ScriptModule -> IO ()

-- | Load a Traced ScriptModule
loadInferenceModel :: FilePath -> IO ScriptModule
instance GHC.Classes.Eq Net.OpNetSpec
instance GHC.Show.Show Net.OpNetSpec
instance Torch.NN.Parameterized Net.OpNet
instance GHC.Show.Show Net.OpNet
instance GHC.Generics.Generic Net.OpNet
instance Torch.NN.Randomizable Net.OpNetSpec Net.OpNet


-- | A module for storing Tabular Data as Tensors
module Data.Frame

-- | Data Frame
data DataFrame a
DataFrame :: ![String] -> !a -> DataFrame a

-- | Unique Column Identifier
[columns] :: DataFrame a -> ![String]

-- | Data
[values] :: DataFrame a -> !a

-- | Number of Rows in DataFrame
nRows :: DataFrame Tensor -> Int

-- | Number of Columns in DataFrame
nCols :: DataFrame Tensor -> Int

-- | Load Tensor from file and construct DataFrame with given Header
fromFile' :: [String] -> FilePath -> IO (DataFrame Tensor)

-- | Load Tensor from file and construct DataFrame with default Header
fromFile :: FilePath -> IO (DataFrame Tensor)

-- | Look up columns
lookup :: [String] -> DataFrame Tensor -> DataFrame Tensor

-- | Shorthand for looking up a single key
(??) :: DataFrame Tensor -> String -> Tensor
infixr 5 ??

-- | Lookup Rows by index
rowSelect' :: [Int] -> DataFrame Tensor -> DataFrame Tensor

-- | Lookup Rows by index
rowSelect :: Tensor -> DataFrame Tensor -> DataFrame Tensor

-- | Filter Rows by condtion
rowFilter :: Tensor -> DataFrame Tensor -> DataFrame Tensor

-- | Sort Data Frame Ascending or Descending
sort :: Bool -> String -> DataFrame Tensor -> DataFrame Tensor

-- | Drop given Rows from Data Frame
rowDrop :: Tensor -> DataFrame Tensor -> DataFrame Tensor

-- | Drop given Rows from Data Frame
rowDrop' :: [Int] -> DataFrame Tensor -> DataFrame Tensor

-- | Row index of all NaNs and Infs in Data Frame
idxNan :: DataFrame Tensor -> Tensor

-- | Drop all Rows with NaNs and Infs (just calls idxNan and rowDrop)
dropNan :: DataFrame Tensor -> DataFrame Tensor

-- | Update given columns with new values (Tensor dimensions must match)
update :: [String] -> Tensor -> DataFrame Tensor -> DataFrame Tensor

-- | Union of two data frames
union :: DataFrame Tensor -> DataFrame Tensor -> DataFrame Tensor

-- | Add columns with data
insert :: [String] -> Tensor -> DataFrame Tensor -> DataFrame Tensor

-- | Join 2 DataFrames, columns must line up
join :: DataFrame Tensor -> DataFrame Tensor -> DataFrame Tensor

-- | Concatenate a list of Data Frames
concat :: [DataFrame Tensor] -> DataFrame Tensor

-- | Take n Random samples from Data Frame
sampleIO :: Int -> Bool -> DataFrame Tensor -> IO (DataFrame Tensor)

-- | Shuffle all rows
shuffleIO :: DataFrame Tensor -> IO (DataFrame Tensor)

-- | Split a dataframe according to a given ratio
trainTestSplit :: [String] -> [String] -> Float -> DataFrame Tensor -> (Tensor, Tensor, Tensor, Tensor)
instance GHC.Show.Show a => GHC.Show.Show (Data.Frame.DataFrame a)
instance GHC.Base.Functor Data.Frame.DataFrame


-- | Hyper Parameters of OpNet
module HyperParameters

-- | First gradient momentum estimate, default = 0.9
β1 :: Float

-- | second gradient momentum estimate, default = 0.999
β2 :: Float

-- | Learning Rate
α :: Tensor


-- | Module for running training
module Run

-- | Run one Update Step
trainStep :: Tensor -> Tensor -> OpNet -> Adam -> IO (OpNet, Adam, Tensor)

-- | Run through all Batches performing an update for each
trainingEpoch :: ProgressBar s -> [Tensor] -> [Tensor] -> [Tensor] -> OpNet -> Adam -> IO (OpNet, Adam, Tensor)

-- | Run one Update Step
validStep :: Tensor -> Tensor -> OpNet -> IO Tensor

-- | Run through all Batches performing an update for each
validationEpoch :: ProgressBar s -> [Tensor] -> [Tensor] -> OpNet -> [Tensor] -> IO Tensor

-- | Run Training and Validation for a given number of Epochs
runEpochs :: FilePath -> Int -> Int -> Tensor -> Tensor -> Tensor -> Tensor -> OpNet -> Adam -> IO (OpNet, Adam)

-- | Initiate Training Run for given Args
run :: Args -> IO ()

-- | Experimental Training Run
runExp :: Args -> IO ()

-- | Basic Training Run
runBase :: Args -> IO ()

-- | Model Test
testModel :: Int -> DataFrame Tensor -> [String] -> [String] -> (Tensor -> Tensor) -> IO ()

-- | Experimental Model Test
testModelExp :: DataFrame Tensor -> [String] -> [String] -> (Tensor -> Tensor) -> IO ()

-- | Filter region Experimental: -1 Saturation: 2 Sub-Threshold: 3
region :: Int -> DataFrame Tensor -> Tensor
